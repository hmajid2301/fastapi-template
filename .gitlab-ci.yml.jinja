image: docker

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375

stages:
  - pre
  - test
  - post-test
  - pre-publish
  - publish

before_script:
  - docker compose build

publish:docker:prod:
  stage: pre
  only:
    - main
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker build --target production -t ${CI_REGISTRY_IMAGE}:latest .
    - docker push ${CI_REGISTRY_IMAGE}:latest

publish:docker:dev:
  stage: pre
  only:
    - main
  before_script: []
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker build --target development -t ${CI_REGISTRY_IMAGE}:development .
    - docker push ${CI_REGISTRY_IMAGE}:development

test:lint:
  stage: test
  only:
    - merge_request
  before_script: []
  script:
    - docker compose run app make lint

test:unit:
  stage: test
  only:
    - merge_request
  script:
    - docker compose run app make unit_tests

test:coverage:
  stage: test
  only:
    - main
    - merge_request
  script:
    - docker compose run app make coverage
  coverage: '/^TOTAL.+?(\S+\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

test:integration:
  stage: test
  only:
    - merge_request
  script:
    - docker compose run app make integration_tests

edit:service-yaml:
  stage: pre-publish
  image:
    name: mikefarah/yq
    entrypoint: [""]
  only:
    - main
  before_script: []
  script:
    - export RANDOM_NAME=$(echo $RANDOM | md5sum | head -c 8; echo)
    - export RANDOM_STR="{{service_name}}-$RANDOM_NAME"
    - yq -i e ".spec.template.metadata.name = \"$RANDOM_STR\"" service.yaml
  artifacts:
    paths:
      - service.yaml

publish:cloud-run:
  stage: publish
  image: google/cloud-sdk
  only:
    - main
  dependencies:
    - publish:docker:prod
    - edit:service-yaml
  before_script: []
  script:
    - cat ${GCP_CLOUD_BUILD_KEY} | docker login -u _json_key --password-stdin https://eu.gcr.io
    - gcloud auth activate-service-account --key-file ${GCP_CLOUD_BUILD_KEY}
    - gcloud config set project ${GCP_PROJECT_ID}
    - docker pull ${CI_REGISTRY_IMAGE}:test
    - docker tag ${CI_REGISTRY_IMAGE}:test eu.gcr.io/${GCP_PROJECT_ID}/{{service_name}}
    - docker push eu.gcr.io/${GCP_PROJECT_ID}/{{service_name}}
    - gcloud run services replace --platform=managed service.yaml
